// In TabManager class, modify the dropTargetForElements setup:

constructor(containerElement: Element) {
  // ... existing constructor code ...

  const { renderer } = share3dDat();
  const canvas = renderer?.domElement;

  dropTargetForElements({
    element: canvas,
    canDrop: args => {
      const data = args.source.data as unknown as TabDragData;
      return data.type === 'tab';
    },
    onDrop: args => {
      const data = args.source.data as unknown as TabDragData;
      const { clientX, clientY } = args.location.current.input;

      // Generate a unique ID for this tab drop
      const tabId = this.generateDocId(data.title);
      
      // Save tab data to window for handling in move.js
      if (!window.droppedTabsData) {
        window.droppedTabsData = new Map();
      }
      window.droppedTabsData.set(tabId, {
        content: data.content,
        title: data.title,
        docId: tabId,
        lastModified: Date.now()
      });

      const file = new File(
        [data.content],
        `${data.title || 'Untitled'}.md`,
        { type: 'text/markdown' }
      );

      const dt = new DataTransfer();
      dt.items.add(file);

      const modifiedEvent = {
        clientX,
        clientY,
        dataTransfer: dt,
        preventDefault: () => {},
        tabId: tabId // Pass the tabId to link with stored data
      };

      // Use your existing file handling system
      window.handleFileDrop_sphere(modifiedEvent);
      window.removeGhostCube();
      window.onPointerUp(modifiedEvent);
    }
  });
}

// Add type declaration for window.droppedTabsData
declare global {
  interface Window {
    handleFileDrop_sphere: (event: any) => void;
    removeGhostCube: () => void;
    onPointerUp: (event: any) => void;
    droppedTabsData: Map<string, {
      content: string;
      title: string;
      docId: string;
      lastModified: number;
    }>;
  }
}